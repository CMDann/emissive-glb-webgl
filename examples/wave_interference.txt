// Wave Interference
// Complex wave physics with multiple interference patterns
// Demonstrates constructive and destructive wave interference

void main() {
    vec2 uv = vUv;
    vec3 pos = vPosition;
    
    // Multiple wave sources at different positions
    vec2 source1 = vec2(2.0, 1.0);
    vec2 source2 = vec2(-1.5, -1.0);
    vec2 source3 = vec2(0.5, 2.0);
    vec2 source4 = vec2(-2.0, 0.5);
    vec2 source5 = vec2(1.0, -2.0);
    
    // Calculate distances from each source
    float dist1 = length(pos.xy - source1);
    float dist2 = length(pos.xy - source2);
    float dist3 = length(pos.xy - source3);
    float dist4 = length(pos.xy - source4);
    float dist5 = length(pos.xy - source5);
    
    // Different wave frequencies and phases
    float freq1 = 8.0;
    float freq2 = 6.0;
    float freq3 = 10.0;
    float freq4 = 7.0;
    float freq5 = 9.0;
    
    float phase1 = time * 2.0;
    float phase2 = time * 1.5;
    float phase3 = time * 2.5;
    float phase4 = time * 1.8;
    float phase5 = time * 2.2;
    
    // Generate waves from each source
    float wave1 = sin(dist1 * freq1 - phase1) / (1.0 + dist1 * 0.5);
    float wave2 = sin(dist2 * freq2 - phase2) / (1.0 + dist2 * 0.5);
    float wave3 = sin(dist3 * freq3 - phase3) / (1.0 + dist3 * 0.5);
    float wave4 = sin(dist4 * freq4 - phase4) / (1.0 + dist4 * 0.5);
    float wave5 = sin(dist5 * freq5 - phase5) / (1.0 + dist5 * 0.5);
    
    // Interference pattern - sum of all waves
    float interference = wave1 + wave2 + wave3 + wave4 + wave5;
    
    // Standing wave patterns
    float standingWave1 = sin(pos.x * 5.0) * cos(time * 3.0);
    float standingWave2 = cos(pos.y * 4.0) * sin(time * 2.5);
    float standingWaves = standingWave1 + standingWave2;
    
    // Circular wave ripples
    float rippleTime = time * 1.5;
    float ripple1 = sin(length(pos.xy) * 12.0 - rippleTime * 4.0);
    float ripple2 = sin(length(pos.xy - vec2(1.0, 0.0)) * 10.0 - rippleTime * 3.0);
    float ripples = ripple1 + ripple2;
    
    // Combine all wave types
    float totalWaves = interference * 0.6 + standingWaves * 0.2 + ripples * 0.2;
    
    // Wave amplitude normalization
    totalWaves = totalWaves * 0.2; // Scale down amplitude
    
    // Create constructive (bright) and destructive (dark) interference
    float constructive = max(0.0, totalWaves);
    float destructive = max(0.0, -totalWaves);
    
    // Phase analysis for color mapping
    float phase = atan(sin(totalWaves * 3.14159), cos(totalWaves * 3.14159));
    phase = (phase + 3.14159) / (2.0 * 3.14159); // Normalize to 0-1
    
    // Wave energy calculation
    float energy = totalWaves * totalWaves;
    
    // Color mapping based on wave properties
    vec3 constructiveColor = vec3(0.2, 0.8, 1.0);  // Bright blue
    vec3 destructiveColor = vec3(0.8, 0.2, 0.4);   // Red-magenta
    vec3 neutralColor = vec3(0.5, 0.5, 0.7);       // Gray-blue
    
    // Mix colors based on interference type
    vec3 waveColor = neutralColor;
    waveColor = mix(waveColor, constructiveColor, constructive * 2.0);
    waveColor = mix(waveColor, destructiveColor, destructive * 2.0);
    
    // Add phase-based color variation
    vec3 phaseColor = vec3(
        sin(phase * 6.28 + time),
        sin(phase * 6.28 + time + 2.094),
        sin(phase * 6.28 + time + 4.188)
    ) * 0.5 + 0.5;
    
    waveColor = mix(waveColor, phaseColor, 0.3);
    
    // Energy-based brightness
    waveColor *= (1.0 + energy * 2.0);
    
    // Add wave crest highlighting
    float crests = smoothstep(0.8, 1.0, abs(totalWaves));
    waveColor += vec3(1.0, 1.0, 1.0) * crests * 0.5;
    
    // Dynamic wave movement visualization
    float movement = sin(time * 4.0 + totalWaves * 10.0) * 0.1 + 0.9;
    waveColor *= movement;
    
    // Transparency based on wave amplitude
    float alpha = 0.7 + abs(totalWaves) * 0.5;
    alpha += energy * 0.3;
    alpha = clamp(alpha, 0.3, 1.0);
    
    gl_FragColor = vec4(waveColor, alpha);
}