// Holographic Interference Pattern
// Creates a complex holographic effect with interference waves and depth
// Best applied to objects with interesting geometry

void main() {
    vec2 uv = vUv;
    vec3 pos = vPosition;
    vec3 normal = normalize(vNormal);
    
    // Create multiple interference wave sources
    float wave1 = sin(length(pos.xy - vec2(2.0, 1.0)) * 12.0 - time * 4.0);
    float wave2 = sin(length(pos.xy - vec2(-1.5, -2.0)) * 15.0 - time * 3.5);
    float wave3 = sin(length(pos.xz - vec2(0.5, -1.0)) * 18.0 - time * 5.0);
    float wave4 = sin(length(pos.yz - vec2(1.0, 0.0)) * 20.0 - time * 2.8);
    
    // Combine waves with interference patterns
    float interference = (wave1 + wave2 + wave3 + wave4) * 0.25;
    
    // Add surface normal influence for realistic holographic depth
    float normalInfluence = dot(normal, vec3(0.707, 0.707, 0.0));
    interference *= (1.0 + normalInfluence * 0.3);
    
    // Create holographic color shifting based on viewing angle
    float fresnel = 1.0 - abs(dot(normal, vec3(0.0, 0.0, 1.0)));
    
    // Generate rainbow holographic colors
    vec3 hologramColor = vec3(
        sin(interference * 3.14159 + time) * 0.5 + 0.5,
        sin(interference * 3.14159 + time + 2.094) * 0.5 + 0.5,  // +120 degrees
        sin(interference * 3.14159 + time + 4.188) * 0.5 + 0.5   // +240 degrees
    );
    
    // Add iridescent edge glow
    vec3 edgeGlow = vec3(0.3, 0.7, 1.0) * pow(fresnel, 2.0);
    
    // Combine all effects
    vec3 finalColor = hologramColor * (0.7 + interference * 0.3) + edgeGlow;
    
    // Add transparency based on interference pattern
    float alpha = 0.6 + interference * 0.4;
    
    gl_FragColor = vec4(finalColor, alpha);
}